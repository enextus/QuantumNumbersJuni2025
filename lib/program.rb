# Подключаем библиотеки для работы с HTTP-запросами и JSON
require 'net/http'
require 'json'

# Выводим сообщение о запуске программы
puts "Программа запущена. Начало работы."

# Получаем аргумент из командной строки (количество чисел)
puts "Чтение аргумента из командной строки..."
count = ARGV[0]&.to_i
puts "Получен аргумент командной строки: '#{ARGV[0] || 'не указан'}'"
puts "Преобразование аргумента в число: #{count || 'nil'}"

# Проверяем корректность введённого значения
puts "Проверка корректности введённого количества..."
if count.nil? || count <= 0
  # Выводим сообщения об ошибке, если аргумент некорректен
  puts "Ошибка: аргумент отсутствует или не является положительным числом!"
  puts "Текущее значение count: #{count}"
  puts "Инструкция: укажите положительное целое число как аргумент."
  puts "Пример запуска: ruby program.rb 5"
  exit 1
else
  # Подтверждаем корректность аргумента
  puts "Аргумент корректен. Количество чисел для запроса: #{count}"
end

# Формируем URL для запроса к API
puts "Формирование URL для запроса..."
uri = URI("https://www.lfdr.de/QRNG/random?count=#{count}")
puts "URL успешно сформирован: #{uri}"

# Начинаем блок обработки сетевого запроса
begin
  # Сообщаем о начале выполнения запроса
  puts "Отправка GET-запроса к API..."
  response = Net::HTTP.get_response(uri)
  puts "Запрос отправлен. Получен ответ от сервера."
  puts "Код ответа HTTP: #{response.code}"
  puts "Сообщение ответа: #{response.message}"

  # Проверяем, успешен ли запрос
  puts "Проверка успешности ответа..."
  if response.is_a?(Net::HTTPSuccess)
    # Успешный ответ — начинаем обработку
    puts "Ответ успешен (статус 200). Чтение тела ответа..."
    body = response.body
    puts "Тело ответа получено: #{body}"

    begin
      # Парсим JSON из тела ответа
      puts "Парсинг JSON из ответа..."
      random_numbers = JSON.parse(body)
      puts "JSON успешно распарсен. Тип данных: #{random_numbers.class}"
      puts "Содержимое распаренного ответа: #{random_numbers.inspect}"

      # Проверяем, что ответ — массив
      puts "Проверка формата данных..."
      if random_numbers.is_a?(Array)
        # Выводим информацию об успешном результате
        puts "Данные в формате массива. Количество элементов: #{random_numbers.size}"
        puts "Все числа корректны. Вывод результата..."
        puts "Случайные квантовые числа: #{random_numbers.join(', ')}"
      else
        # Сообщаем о неожиданном формате данных
        puts "Ошибка: данные не в формате массива!"
        puts "Полученные данные: #{random_numbers}"
      end
    rescue JSON::ParserError => e
      # Обрабатываем ошибку парсинга JSON
      puts "Ошибка при парсинге JSON!"
      puts "Текст ошибки: #{e.message}"
      puts "Тело ответа, вызвавшее ошибку: #{body}"
    end
  else
    # Сообщаем об ошибке HTTP
    puts "Запрос не успешен!"
    puts "Код ошибки HTTP: #{response.code}"
    puts "Сообщение ошибки: #{response.message}"
  end
rescue StandardError => e
  # Обрабатываем сетевые или другие ошибки
  puts "Произошла сетевая ошибка!"
  puts "Текст ошибки: #{e.message}"
end

# Выводим сообщение о завершении программы
puts "Программа завершена. Работа окончена."